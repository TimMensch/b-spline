{"version":3,"sources":["test/testbspline.ts"],"names":[],"mappings":"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","file":"test/testbspline.js","sourcesContent":["///\n\nimport { BSpline } from \"../bspline\";\n\nconst tvalues = [ 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0 ];\nconst degree = 2;\n\n/**\n * epsilon-based numerical equivalence for two points\n */\nfunction equivalent(found:Array<number>, target:Array<number>, e:number = 0.001) {\n  return !found.some(function (v, idx) {\n    return Math.abs(v - target[ idx ]) > e;\n  });\n}\n\n/**\n * verify that a particular full curve description matches the result of interpolate()\n */\nfunction verify(description:string, tvalues:Array<number>, points:Array<Array<number>>, expected:Array<Array<number>>, degree:number=2, knots?:Array<number>, weights?:Array<number>) {\n  let errors:string[] = [];\n  tvalues.map(function (t) {\n    let bspline = new BSpline(degree, points, knots, weights);\n    return bspline.getPoint(t);\n  }).forEach(function (v, idx) {\n    let t = expected[ idx ];\n    if (!equivalent(v, t)) {\n      errors.push([\n        \"Sample\",\n        idx,\n        \"did not yield the expected result.\",\n        v,\n        \"not equal to\",\n        t\n      ].join(\" \"));\n    }\n  });\n  console.log(description + \": \" + (errors.length > 0 ? \"failed\" : \"passed\"));\n  if (errors.length > 0) {\n    console.error(errors);\n    process.exit(1);\n  }\n}\n\n// test uniform curve\nlet points = [\n  [ -1.0, 0.0 ],\n  [ -0.5, 0.5 ],\n  [ 0.5, -0.5 ],\n  [ 1.0, 0.0 ]\n];\nlet expected = [\n  [ -0.75, 0.25 ],\n  [ -0.64, 0.32 ],\n  [ -0.51, 0.33 ],\n  [ -0.36, 0.28 ],\n  [ -0.19, 0.17 ],\n  [ 0, 0 ],\n  [ 0.19, -0.17 ],\n  [ 0.36, -0.28 ],\n  [ 0.51, -0.33 ],\n  [ 0.64, -0.32 ],\n  [ 0.75, -0.25 ]\n];\nverify(\"uniform b-spline test\", tvalues, points, expected);\n\n\n// test non-uniform curve\nlet knots = [ 0, 0, 0, 1, 2, 2, 2 ];\nexpected = [\n  [ -1, 0 ],\n  [ -0.8, 0.16 ],\n  [ -0.6, 0.24 ],\n  [ -0.4, 0.24 ],\n  [ -0.2, 0.16 ],\n  [ 0, 0 ],\n  [ 0.2, -0.16 ],\n  [ 0.4, -0.24 ],\n  [ 0.6, -0.24 ],\n  [ 0.8, -0.16 ],\n  [ 1, 0 ]\n];\nverify(\"non-uniform b-spline test\", tvalues, points, expected, degree, knots);\n\n\n// test closed non-uniform curvce\npoints = [\n  [ -1.0, 0.0 ],\n  [ -0.5, 0.5 ],\n  [ 0.5, -0.5 ],\n  [ 1.0, 0.0 ],\n  // ...\n  [ -1.0, 0.0 ],\n  [ -0.5, 0.5 ],\n  [ 0.5, -0.5 ]\n];\nknots = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ];\nexpected = [\n  [ -0.75, 0.25 ],\n  [ -0.4375, 0.3125 ],\n  [ 0, 0 ],\n  [ 0.4375, -0.3125 ],\n  [ 0.75, -0.25 ],\n  [ 0.6875, -0.0625 ],\n  [ 0, 0 ],\n  [ -0.6875, 0.0625 ],\n  [ -0.75, 0.25 ],\n  [ -0.4375, 0.3125 ],\n  [ 0, 0 ]\n];\nverify(\"closed non-uniform b-spline test\", tvalues, points, expected, degree, knots);\n\n\n// test non-uniform rational curve\npoints = [\n  [ 0.0, -0.5 ],\n  [ -0.5, -0.5 ],\n  [ -0.5, 0.0 ],\n  [ -0.5, 0.5 ],\n  [ 0.0, 0.5 ],\n  [ 0.5, 0.5 ],\n  [ 0.5, 0.0 ],\n  [ 0.5, -0.5 ],\n  // duplicated first point\n  [ 0.0, -0.5 ]\n];\nknots = [ 0, 0, 0, 1 / 4, 1 / 4, 1 / 2, 1 / 2, 3 / 4, 3 / 4, 1, 1, 1 ];\nlet w = Math.pow(0.5, 0.5);\nlet weights = [ 1, w, 1, w, 1, w, 1, w, 1 ];\nexpected = [\n  [ 0, -0.5 ],\n  [ -0.29, -0.4069 ],\n  [ -0.4779, -0.1469 ],\n  [ -0.4779, 0.1469 ],\n  [ -0.29, 0.4069 ],\n  [ 0, 0.5 ],\n  [ 0.29, 0.4069 ],\n  [ 0.4779, 0.1469 ],\n  [ 0.4779, -0.1469 ],\n  [ 0.29, -0.4069 ],\n  [ 0, -0.5 ]\n];\nverify(\"non-uniform rational b-spline test\", tvalues, points, expected, degree, knots, weights);\n\n// test non-uniform rational curve with boosted weights\nlet boosted = 4 * w;\nweights = [ 1, boosted, 1, boosted, 1, boosted, 1, boosted, 1 ];\nexpected = [\n  [ 0, -0.5 ],\n  [ -0.4041, -0.4574 ],\n  [ -0.4874, -0.2981 ],\n  [ -0.4874, 0.2981 ],\n  [ -0.4041, 0.4574 ],\n  [ 0, 0.5 ],\n  [ 0.4041, 0.4574 ],\n  [ 0.4874, 0.2981 ],\n  [ 0.4874, -0.2981 ],\n  [ 0.4041, -0.4574 ],\n  [ 0, -0.5 ]\n];\n\nverify(\"weight-boosted non-uniform rational b-spline test\", tvalues, points, expected, degree, knots, weights);\n"],"sourceRoot":"/source/"}