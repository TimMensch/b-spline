{"version":3,"sources":["bspline.ts"],"names":[],"mappings":"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","file":"bspline.js","sourcesContent":["export class BSpline {\n\n    private _domain: number[];\n    private _low: number;\n    private _high: number;\n    private _d: number;\n    private _n: number;\n\n    constructor(public degree: number, public points: Array<Array<number>>,\n        public knots:Array<number>=[], public weights:Array<number>=[]) {\n\n        let n = this._n = points.length;    // points count\n        this._d = points[ 0 ].length; // point dimensionality\n\n        if (degree < 1) throw new Error(\"degree must be at least 1 (linear)\");\n        if (degree > (n - 1)) throw new Error(\"degree must be less than or equal to point count - 1\");\n\n        if (this.weights.length===0) {\n            // build weight vector of length [n]\n            for (let i = 0; i < n; i++) {\n                this.weights[ i ] = 1;\n            }\n        }\n\n        if (this.knots.length===0) {\n            // build knot vector of length [n + degree + 1]\n            for (let i = 0; i < n + degree + 1; i++) {\n                knots[ i ] = i;\n            }\n        } else {\n            if (this.knots.length !== n + degree + 1) throw new Error(\"bad knot vector length\");\n        }\n        this._domain = [\n            degree,\n            knots.length - 1 - degree\n        ];\n\n        this._low= knots[ this._domain[ 0 ] ];\n        this._high = knots[ this._domain[ 1 ] ];\n    }\n\n    getPoint(t: number, result:Array<number>=[]): Array<number> {\n        const d = this._d;\n\n        // remap t to the domain where the spline is defined\n        t = t * (this._high - this._low) + this._low;\n        if (t < this._low || t > this._high) throw new Error(\"out of bounds\");\n\n        let splineSegment: number;\n        // find splineSegment for the [t] value provided\n        for (splineSegment = this._domain[ 0 ]; splineSegment < this._domain[ 1 ]; splineSegment++) {\n            if (t >= this.knots[ splineSegment ] && t <= this.knots[ splineSegment + 1 ]) {\n                break;\n            }\n        }\n        // convert points to homogeneous coordinates\n        let v:Array<Array<number>> = [];\n        for (let i = 0; i < this._n; i++) {\n            v[ i ] = [];\n            for (let j = 0; j < d; j++) {\n                v[ i ][ j ] = this.points[ i ][ j ] * this.weights[ i ];\n            }\n            v[ i ][ d ] = this.weights[ i ];\n        }\n\n        // l (level) goes from 1 to the curve degree + 1\n        let alpha:number;\n        for (let l = 1; l <= this.degree + 1; l++) {\n            // build level l of the pyramid\n            for (let i = splineSegment; i > splineSegment - this.degree - 1 + l; i--) {\n                alpha = (t - this.knots[ i ]) / (this.knots[ i + this.degree + 1 - l ] - this.knots[ i ]);\n\n                // interpolate each component\n                for (let j = 0; j < d + 1; j++) {\n                    v[ i ][ j ] = (1 - alpha) * v[ i - 1 ][ j ] + alpha * v[ i ][ j ];\n                }\n            }\n        }\n\n        // convert back to cartesian and return\n        for (let i = 0; i < d; i++) {\n            result[ i ] = v[ splineSegment ][ i ] / v[ splineSegment ][ d ];\n        }\n\n        return result;\n    }\n}\n"],"sourceRoot":"/source/"}